/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Bet } from "./Bet";
import { BetCountArgs } from "./BetCountArgs";
import { BetFindManyArgs } from "./BetFindManyArgs";
import { BetFindUniqueArgs } from "./BetFindUniqueArgs";
import { CreateBetArgs } from "./CreateBetArgs";
import { UpdateBetArgs } from "./UpdateBetArgs";
import { DeleteBetArgs } from "./DeleteBetArgs";
import { User } from "../../user/base/User";
import { Event } from "../../event/base/Event";
import { BetService } from "../bet.service";
@graphql.Resolver(() => Bet)
export class BetResolverBase {
  constructor(protected readonly service: BetService) {}

  async _betsMeta(
    @graphql.Args() args: BetCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Bet])
  async bets(@graphql.Args() args: BetFindManyArgs): Promise<Bet[]> {
    return this.service.bets(args);
  }

  @graphql.Query(() => Bet, { nullable: true })
  async bet(@graphql.Args() args: BetFindUniqueArgs): Promise<Bet | null> {
    const result = await this.service.bet(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Bet)
  async createBet(@graphql.Args() args: CreateBetArgs): Promise<Bet> {
    return await this.service.createBet({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,

        event: args.data.event
          ? {
              connect: args.data.event,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Bet)
  async updateBet(@graphql.Args() args: UpdateBetArgs): Promise<Bet | null> {
    try {
      return await this.service.updateBet({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,

          event: args.data.event
            ? {
                connect: args.data.event,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Bet)
  async deleteBet(@graphql.Args() args: DeleteBetArgs): Promise<Bet | null> {
    try {
      return await this.service.deleteBet(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: Bet): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Event, {
    nullable: true,
    name: "event",
  })
  async getEvent(@graphql.Parent() parent: Bet): Promise<Event | null> {
    const result = await this.service.getEvent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
